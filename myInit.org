#+STARTUP: overview

* General
#+BEGIN_SRC emacs-lisp
    ;; (toggle-frame-fullscreen)
    (setq gc-cons-threshold (* 800000 100))
    (setq-default fill-column 80)
    (column-number-mode 1)
    (setq package-check-signature nil)
    (use-package format-all 
      :ensure t
      :hook (web-mode . format-all-mode))

#+END_SRC
* Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-minimum-prefix-length 1)
    (setq company-idle-delay 0)
    (setq company-dabbrev-downcase 0)
    (global-company-mode 1))
#+END_SRC
* EVIL
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
(use-package evil
  :ensure t
  :config
  (evil-mode +1))
 
(fset 'yes-or-no-p 'y-or-n-p)

;; Set exec path from shell
(use-package exec-path-from-shell :ensure t
  :demand
  :config
  (exec-path-from-shell-initialize))

(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))


(use-package winum ; window numbering
  :ensure t
  :config
  (winum-mode))

(use-package which-key
  :ensure t
  :config
  (which-key-mode)
  (setq which-key-idle-delay 0)) ; show keybinding functions

#+END_SRC

* Keybinding
#+BEGIN_SRC emacs-lisp
  (defun delete-this-buffer ()
    "Kill current buffer."
    (interactive)
    (kill-buffer (current-buffer)))
  (defun delete-if-file ()
    "Delete file and kill buffer."
    (interactive)
    (if (buffer-file-name)
	(delete-file (buffer-file-name))
	(delete-this-buffer)
      ))
  ;; source: http://steve.yegge.googlepages.com/my-dot-emacs-file
  (defun rename-file-and-buffer (new-name)
    "Renames both current buffer and file it's visiting to NEW-NAME."
    (interactive "sNew name: ")
    (let ((name (buffer-name))
	  (filename (buffer-file-name)))
      (if (not filename)
	  (message "Buffer '%s' is not visiting a file!" name)
	(if (get-buffer new-name)
	    (message "A buffer named '%s' already exists!" new-name)
	  (progn
	    (rename-file filename new-name 1)
	    (rename-buffer new-name)
	    (set-visited-file-name new-name)
	    (set-buffer-modified-p nil))))))
  (use-package general ; keybindings
    :ensure t
    :config
    (general-define-key
      :states '(normal visual insert emacs)
      :prefix "SPC"
      :non-normal-prefix "C-SPC"

      "TAB" '(mode-line-other-buffer :which-key "prev buffer")

      ;; applications
      "a" '(:which-key "applications")
      "ad" '(deer :which-key "deer")
      "ar" '(ranger :which-key "ranger")

      ;; debug
      "d" '(:wich-key "debug")
      "dd" '(dap-debug :which-key "start")
      "dj" '(dap-next :which-key "next")
      "db" '(dap-breakpoint-toggle :which-key "breakpoint")

      ;; files
      "f" '(:which-key "files")
      "fc" '(copy-file :which-key "copy")
      "ff" '(helm-find-files :which-key "find files")
      "fs" '(save-buffer :which-key "save file")
      "fd" '(delete-if-file :which-key "delete file")
      "fR" '(rename-file-and-buffer :which-key "rename file")

      ;; window
      "w" '(:which-key "window")
      "wd" '((lambda () (interactive) (delete-window) (balance-windows)) :which-key "delete window")
      "wv" '((lambda () (interactive) (split-window-horizontally) (balance-windows)) :which-key "vertical split")
      "wV" '((lambda () (interactive) (split-window-horizontally) (other-window 1) (balance-windows)) :which-key "vertical split and focus")
      "1" '((lambda () (interactive) (winum-select-window-1)) :which-key "select first window")
      "2" '((lambda () (interactive) (winum-select-window-2)) :which-key "select second window")
      "3" '((lambda () (interactive) (winum-select-window-3)) :which-key "select third window")
      "4" '((lambda () (interactive) (winum-select-window-4)) :which-key "select fourth window")

      ;; buffer
      "b" '(:which-key "buffer")
      "bb" '(switch-to-buffer :which-key "list")
      "bd" '(delete-this-buffer :wich-key "kill")
      "br" '(rename-buffer :which-key "rename")

      ;; project
      "p" '(:which-key "project")
      "pc" '(projectile-compile-project :which-key "compile")
      "pd" '(projectile-remove-known-project :which-key "delete project")
      "pf" '(helm-projectile-find-file :which-key "find file")
      "pi" '(projectile-invalidate-cache :which-key "clear cache")
      "pn" '(neotree-toggle :which-key "Neotree")
      "pp" '(helm-projectile-switch-project :which-key "switch project")
      "pr" '(projectile-run-project :which-key "run")
      "pt" '(projectile-test-project :which-key "test")

      ;; git
      "g" '(:which-key "git")
      "gm" '(magit-status :which-key "magit")
      "gg" '(gist-list :which-key "gist")

      ;; help
      "h" '(:which-key "help")
      "hh" '(info :which-key "help")
      "hf" '(describe-function :which-key "describe function")
      "hv" '(describe-variable :which-key "describe variable")
      "hm" '(describe-mode :which-key "describe mode")
      "hk" '(describe-key :which-key "describe key")

      ;; insert
      "i" '(:which-key "insert")
      "ic" '(insert-char :wich-key "character")

      ;; jupyter
      "j" '(:which-key "jupyter")
      "jl" '(ein:notebooklist-open :which-key "open notebooklist")
      "js" '(ein:jupyter-server-start :which-key "start jupyter server")
      "jq" '(ein:jupyter-server-stop :which-key "stop jupyter server")

      ;; error
      "e" '(:which-key "error")
      "el" '(flycheck-list-errors :which-key "list errors")

      ;; yasnippet
      "y" '(:which-key "yasnippet")
      "yn" '(yas-new-snippet :which-key "new snippet")
      "ye" '(yas-visit-snippet-file :which-key "edit snippet")

      ;; emacs
      "q" '(:which-key "emacs")
      "qe" '(eval-expression :which-key "eval")
      "qq" '(save-buffers-kill-terminal :which-key "close")

      ;; shell
      "'" '((lambda () (interactive) (ansi-term "/usr/local/bin/zsh")) :which-key "shell")
      ";" '(comment-dwim :which-key "un/comment")))

  (use-package solarized-theme
    :ensure t
    :config
    (load-theme 'solarized-dark t))

  (use-package ranger :ensure t)

  (use-package flycheck :ensure t)

  (use-package helm
    :ensure t
    :config
    (helm-mode 1)
    (define-key helm-map (kbd "TAB") #'helm-execute-persistent-action))


  ;; Set Super Key to Command
  (setq ns-command-modifier 'super)


  (use-package shackle ; Helm window always bottom
    :ensure t
    :config
    (shackle-mode +1)
    (setq shackle-rules '(("\\`\\*helm.*?\\*\\'" :regexp t :align t :ratio 0.4))))

  (use-package neotree :ensure t)

  (use-package pdf-tools
    :ensure t
    :config
    (pdf-tools-install))
#+END_SRC

* Projectile
#+BEGIN_SRC emacs-lisp
  ;; Project Organisation
  (use-package projectile
    :ensure t
    :config
    (setq projectile-indexing-method 'alien) ; use external cmds find and git to index files
    (setq projectile-enable-caching t)
    (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (projectile-mode +1))

  (use-package helm-projectile ; Open Projectile in Helm
    :ensure t
    :config
    (setq projectile-completion-system 'helm)
    (helm-projectile-on))
#+END_SRC
* Javascript
** Normal
#+BEGIN_SRC emacs-lisp
  (use-package prettier-js ; indentation
    :ensure t
    :hook (js2-mode prettier-js-mode))

  ;; (defun setup-tide-mode ()
  ;;   (interactive)
  ;;   (tide-setup)
  ;;   (flycheck-mode +1)
  ;;   (setq flycheck-check-syntax-automatically '(save mode-enabled))
  ;;   (eldoc-mode +1)
  ;;   (tide-hl-identifier-mode +1)
  ;;   (company-mode +1))

  (use-package typescript-mode
    :ensure t
    :init
    (setq typescript-indent-level 2))

  ;; (use-package tide
  ;;   :ensure t
  ;;   :mode ("\\.ts\\'" . 'typescript-mode)
  ;;   :init
  ;;   (electric-pair-mode)
  ;;   :config
  ;;   (add-hook 'before-save-hook #'tide-format-before-save)
  ;;   (setq tide-format-options '(:indentSize 2 :tabSize 2)))

#+END_SRC

** React
#+BEGIN_SRC
(use-package rjsx-mode
  :ensure t
  :mode "\\.jsx\\'"
  :config
  (add-hook 'before-save-hook #'prettier)
  (add-hook 'rjsx-mode-hook 'flycheck-mode))


(setq company-tooltip-align-annotations t)


(load (expand-file-name "./git/init.el" user-emacs-directory))
(load (expand-file-name "./python/init.el" user-emacs-directory))
(load (expand-file-name "./lisp/init.el" user-emacs-directory))
;; (load (expand-file-name "./eshell.el" user-emacs-directory))


;(use-package evil-collection
;  :ensure t
;  :custom (evil-collection-setup-minibuffer t)
;  :init (evil-collection-init))


#+END_SRC

* JSON
#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :mode "\\.json\\'"
    :init (setq json-reformat:indent-width: 2)
    :ensure t)
#+END_SRC
* Latex
#+BEGIN_SRC emacs-lisp
  (use-package tex
    :mode "//.tex//'"
    :ensure auctex
    :ensure auctex-latexmk		;
    :config
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq TeX-auto-save t)
    (setq TeX-PDF-mode t)
    (auctex-latexmk-setup)
    (setq TeX-engine 'luatex)
    (add-hook 'TeX-mode-hook #'flyspell-mode)
    (add-hook 'TeX-mode-hook #'turn-on-auto-fill)
    :general(
      :states '(normal visual emacs)
      :keymap 'LaTeX-mode-map
      :prefix ","
      "b" '((lambda () (interactive) (TeX-command "LatexMk" 'TeX-master-file -1)) :which-key "build")
      "fp" '(LaTeX-fill-paragraph :which-key "fill paragraph") ;; C-c C-q C-p
      "fr" '(LaTeX-fill-region :which-key "fill region") ;; C-c C-q C-r
      "fs" '(LaTeX-fill-section :which-key "fill section") ;; C-C C-q C-s
    ))

#+END_SRC
* Git
#+BEGIN_SRC emacs-lisp
  (use-package magit :ensure t)
  (use-package gist :ensure t)
  (use-package markdown-mode
    :ensure t
    :mode (("README\\.md\\'" . gfm-mode)
	   ("\\.md\\'" . markdown-mode)
	   ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+END_SRC
* LSP
#+BEGIN_SRC emacs-lisp
     (use-package lsp-mode
       :ensure t
       :hook ((dart-mode . lsp) (python-mode . lsp) (c++-mode . lsp) (web-mode . lsp) (typescript-mode . lsp) (css-mode . lsp) (TeX-mode . lsp))
       :commands lsp
       :config
       (setq lsp-prefer-flymake nil))
     (use-package company-lsp 
       :ensure t
       :requires company
       :commands company-lsp
       :config
       (setq company-transformers nil
	     company-lsp-async t
	     company-lsp-cache-candidates nil))
  (use-package helm-lsp :ensure t)
  (use-package lsp-ui 
    :ensure t
    :requires lsp-mode flycheck
    :commands lsp-ui-mode
    :config
    (setq lsp-ui-flycheck-enable t
      lsp-ui-flycheck-list-position 'right
      lsp-ui-flycheck-live-reporting t)
     ;; lsp-ui-doc-enable t
     ;;  lsp-ui-doc-use-childframe t
     ;;  lsp-ui-doc-position 'top
     ;;  lsp-ui-doc-include-signature t
     ;;  lsp-ui-sideline-enable nil
      ;; lsp-ui-peek-enable t
      ;; lsp-ui-peek-list-width 60
      ;; lsp-ui-peek-peek-height 25)
    (add-hook 'lsp-mode-hook 'lsp-ui-mode))
  (use-package dap-mode
    :ensure t
    :config
    (dap-mode 1)
    (dap-ui-mode 1)
    (require 'dap-python)
    (require 'dap-lldb)


    (defun my/window-visible (b-name)
      "Return whether B-NAME is visible."
      (-> (-compose 'buffer-name 'window-buffer)
	  (-map (window-list))
	  (-contains? b-name)))

    (defun my/show-debug-windows (session)
      "Show debug windows."
      (let ((lsp--cur-workspace (dap--debug-session-workspace session)))
	(save-excursion
	  ;; display locals
	  (unless (my/window-visible dap-ui--locals-buffer)
	  (dap-ui-locals))
	  ;; display sessions
	  (unless (my/window-visible dap-ui--sessions-buffer)
	  (dap-ui-sessions)))))

    (add-hook 'dap-stopped-hook 'my/show-debug-windows)

    (defun my/hide-debug-windows (session)
      "Hide debug windows when all debug sessions are dead."
      (unless (-filter 'dap--session-running (dap--get-sessions))
	(and (get-buffer dap-ui--sessions-buffer)
	   (kill-buffer dap-ui--sessions-buffer))
	(and (get-buffer dap-ui--locals-buffer)
	   (kill-buffer dap-ui--locals-buffer))))

    (add-hook 'dap-terminated-hook 'my/hide-debug-windows))
#+END_SRC
* Flutter
#+BEGIN_SRC emacs-lisp
  (use-package dart-mode
    :ensure t
    :ensure-system-package (dart_language_server ."pub global active dart_language_server")
    :custom
    (dart-format-on-save t)
    (dart-sdk-path "/Applications/flutter/bin/cache/dart-sdk/"))

  (use-package flutter
    :ensure t
    :after dart-mode
    :bind (:map dart-mode-map
		("C-M-x" . #'flutter-run-or-hot-reload))
    :custom
    (flutter-sdk-path "/Applications/flutter/"))

  ;; Optional
  (use-package flutter-l10n-flycheck
    :ensure t
    :after flutter
    :config
    (flutter-l10n-flycheck-setup))
#+END_SRC
* C++
#+BEGIN_SRC emacs-lisp
    (use-package cmake-mode :ensure t)
    (use-package platformio-mode :ensure t)
    (use-package clang-format
      :ensure t
      :config
      (add-hook 'c++-mode-hook
		(lambda () (add-hook 'before-save-hook #'clang-format-buffer nil 'local))))
  (general-def c++-mode-map
    :states 'normal
    :prefix ","
    "c" '(ff-find-other-file :which-key "goto source/header"))
#+END_SRC
* Spellcheck
#+BEGIN_SRC emacs-lisp
(when (executable-find "hunspell")
  (setq-default ispell-program-name "hunspell")
  (setq ispell-really-hunspell t))
#+END_SRC
* Yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :bind (:map yas-minor-mode-map
		("<C-tab>" . 'yas-expand))
    :config
    (yas-global-mode 1))
#+END_SRC
* Web
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :mode "\\.html\\'"
    :ensure t
    :config
    (setq web-mode-enable-auto-pairing t)
    (setq web-mode-markup-indent-offset 2))
  ;; (setq sgml-quick-keys 'close) ;; C-c / to close html tag
  (setq css-indent-offset 2)
#+END_SRC
* Org
#+BEGIN_SRC emacs-lisp
  (general-def org-mode-map
    :states 'normal
    :prefix ","
    :keymaps 'org-mode-map
    "h" 'org-insert-heading-respect-content
    "i" 'org-insert-todo-heading)
#+END_SRC
* Python
#+BEGIN_SRC emacs-lisp
  (use-package pyvenv :ensure t)
  (use-package ein
    :ensure t
    :commands (ein:notebooklist-open)
    :general(
	     :states '(normal)
	     :keymap 'ein:notebook-mode-map
	     :prefix ","
	     "d" '(ein:worksheet-kill-cell :wich-key "kill cell")
	     "j" '(ein:worksheet-goto-next-input :whick-key "goto next input")
	     "k" '(ein:worksheet-goto-prev-input :whick-key "goto prev input")
	     "t" '(ein:worksheet-change-cell-type :which-key "change cell type")
	     "J" '(ein:worksheet-insert-cell-below :which-key "insert cell below")
	     "K" '(ein:worksheet-insert-cell-below :which-key "insert cell above"))
    :config (setq ein:polymode t))
#+END_SRC
